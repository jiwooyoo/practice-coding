#include<iostream> 
#include<algorithm>
#include<string>
#include<queue>
#include<stack>
#include<vector>
#include<memory.h>

using namespace std;
struct Trie{
    Trie* next[26];
    int count;
    bool term;
    Trie() : term(false), count(1){
        memset(next, 0, sizeof(next));
    }
    ~Trie(){
        for (int i = 0; i<10; i++){
            if (next[i])
                delete next[i];
        }
    }
    void insert(const char* key){
        if (*key == '\0')
            term = true;
        else{
            int curr = *key - 'a';
            if (next[curr] == NULL)
                next[curr] = new Trie();
            else
                next[curr]->count++;
            next[curr]->insert(key + 1);
 
        }
    }
    int find(const char* key){
        int curr = *key - 'a';
        if (*key == '?'){
            int tmp = 0;
            for (int k = 0; k<26; k++){
                if (next[k] != NULL)
                    tmp += next[k]->count;
            }
            return tmp;
        }
        if (next[curr] == NULL) return 0;
        if (*(key + 1) == '?') return next[curr]->count;
        return next[curr]->find(key + 1);
    }
};
 
Trie *root[10001];
Trie *reroot[10001];

vector<int> solution(vector<string> words, vector<string> queries) {
    
    int wsize=words.size();
    int qsize=queries.size();
    vector<int> answer(qsize,0);
    
    for(int i=0;i<wsize;i++){
        int len=words[i].size();
        const char *w = words[i].c_str();
        
        if(root[len]==NULL) root[len]=new Trie();
        root[len]->insert(w);
        
        string rs=words[i];
        reverse(rs.begin(),rs.end());
        const char *c = rs.c_str();
 
        if(reroot[len]==NULL) reroot[len]=new Trie();
        reroot[len]->insert(c);
    }
    
    int cnt=0;
    for(int i=0;i<qsize;i++){
        int len=queries[i].size();
        const char *q = queries[i].c_str();
 
        
        if(queries[i][len-1]=='?'){
            if(root[len]==NULL){
                cnt++;
                continue;
            }
            else answer[cnt]=root[len]->find(q);
        }
        else{
            string re=queries[i];
            reverse(re.begin(),re.end());
            const char *k = re.c_str();
 
            if(reroot[len]==NULL){
                cnt++;
                continue;
            }
            else answer[cnt]=reroot[len]->find(k);
        }
        cnt++;
    }
    return answer;
}