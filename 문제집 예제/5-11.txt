#include<iostream> 
#include<algorithm>
#include<string>
#include<queue>
#include<vector>
#include<memory.h>
#define INF 987654321
#define MAX 202

using namespace std;   //표준 입출력을 위해

int dx[4] = {-1,0,1,0};
int dy[4] = {0,1,0,-1};
int arr[MAX][MAX];
int dp[MAX][MAX];
bool visited[MAX][MAX];
int n, m;

queue<pair<int,int> > q;

void bfs(int x, int y) {
	q.push({ x, y });
	dp[x][y] = 1;
	int cnt = 1;
	while (!q.empty()) {
		int cx = q.front().first;
		int cy = q.front().second;
		q.pop();

		for (int i = 0; i < 4; i++) {
			int nx = cx + dx[i];
			int ny = cy + dy[i];

			if (nx < 0 || ny < 0 || nx >= n || ny >= m) continue;
			if (!visited[nx][ny] && arr[nx][ny] == 1) {
				visited[nx][ny] = true;
				dp[nx][ny] = dp[cx][cy]+1;
				q.push({ nx,ny });
			}

		}

	}

}
int main() {
	ios_base::sync_with_stdio(0);
	cin.tie(0);

	cin >> n >> m;
	
	memset(visited, false, sizeof(visited));
	memset(arr, -1, sizeof(arr));

	for (int i = 0; i < n; i++) {
		string s;
		cin >> s;
		for (int j = 0; j < m; j++) {
			arr[i][j] = s[j] - '0';
		}
	}

	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			dp[i][j] = INF;
		}
	}

	dp[0][0] = 1;
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			if (!visited[i][j] && arr[i][j] == 1) {
				visited[i][j] = true;
				bfs(i, j);
			}
		}
	}

	cout << dp[n - 1][m - 1] << "\n";
	/*for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			cout << dp[i][j] << " ";
		}
		cout << "\n";
	}*/
}